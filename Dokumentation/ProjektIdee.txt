=== Projektidee julhe, 2016-04-05 ===

Die verrückte Börse

Ein Börse mit Kursen, welche es aus vollig zusammenhangslosen Werten aus allen Ecken des World-Wide-Web generiert werden. 
So kann ein Kurs aus den Windgeschwindigkeiten auf den Fiji-Inseln und dem Klickzahlen eines x-belibiegen Artikels auf Zeit.de generiert werden.
Die Zusammenhänge sind für die Benutzer natürlich nicht einsehbar. Jeder Nutzer erhält ein eigenes Konto und einen Startguthaben.

=== Feedback Alpers, 2016-04-12 ===

Zunächst eine formale Kritik: Sie sollten diese Datei im Verzeichnis Dokumentation speichern, nicht im Repository selbst. Bitte passen Sie das noch an.

Sie haben leider nicht beschrieben, welche Interaktionsmöglichkeiten Ihr Spiel beinhalten soll. Genau darum ging es aber bei der Aufgabe. Sie haben stattdessen beschrieben, wie Daten (für die Datenbank) erhoben werden sollen und das ist für die eigentliche Anwendung zweitrangig, denn da geht es ja darum, eine interaktive Anwendung zu erstellen.

Lassen Sie deshalb vorerst weitgehend außen vor, wie diese Daten erhoben werden sollen, denn effektiv würden Sie hier mit (Pseudo-)Zufallszahlen vergleichbares erhalten. Beschreiben Sie stattdessen, was das eigentliche Spiel ausmacht. (Orientieren Sie sich dazu an Kap. 5.)

Wenn Sie keine rechte Idee bekommen, dann machen Sie das bitte für das folgende Brettspiel: Battue http://www.brettspiele-report.de/battue/

=== Nachtrag 2016-04-16 ===
Das Spiel bietet in der Haupt- bzw Startansicht dem Spieler eine Übersicht über alle derzeitigen Börsenkurse.

Hier kann der Spieler seine derzeitigen "Einsätze" bei jenen Kursen sehen und sich entscheiden ob er Anteile kauft oder Verkauft.
Ein Kontostandt über der Kursansicht informiert den Spieler ausserdem über seinen Kontostand in €. 
Um dem ganzen einwenig Spannung zu geben, wird jeden Tag ein kleiner Betrag vom Konto des Spielers entzogen. (Der Spieler ist somit gezwungen immer ein wenig Gewinn zu erwirschaften.)
Fällt der Kontostand unter 0€, so ist das Spiel verloren. 
eine Anteile werden verkauft und sein Kontostand zurückgesetzt.

Mit einem Klick auf einen einen Kurs wird dem Spieler eine Ansicht präsentiert die ihn über die Kurs veränderung der vergangen Tag informiert.

=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers


==Feedback Jonathan==

Man könnte die kaufbaren Anteile limitieren und die Möglichkeit einbauen Anteile zu (ver-)kaufen. So kann man dann anderen Spielern anbieten ihre Anteile über dem momentanen Marktwert zu kaufen, wenn man meint sie werden sich gut entwickeln (z.B. wird es zum Abend hin auf den Fiji-Inseln jeden Tag windiger, einem Spieler fällt das auf, dass die Aktie jeden Abend steigt, also versucht er morgens alle Anteile an dieser Aktie teuer zu kaufen, um sie Abends noch teuerer zu verkaufen.)

==Feedback Jaacii==
Ich mag die Idee. Angeben was die Benutzer interagieren hätte man wirklich noch. Ich denke mal wetten auf Kurse, Guthaben aufladen etc.
Bin gespannt wie sich dein Projekt entwickelt, insbesondere bin ich gespannt auf die Kurse von den Fijiinseln.

===================================
=== Feedback Alpers, 2016-05-04 ===
===================================

Leider haben Sie da keine Interaktion zwischen Mensch und Programm beschrieben, die über das EVA-Prinzip hinausgeht; Dazu hatte ich vor einige Wochen etwas im Lernraum veröffentlicht: http://www.elearning.haw-hamburg.de/mod/book/view.php?id=607850&chapterid=1846 Lesen Sie sich den Eintrag bitte durch und arbeiten deutlich mehr Interaktionsmöglichkeiten aus.

Außerdem soll es sich um eine webbasierte Anwendung handeln. Die Tatsache, dass Sie willkürlich aus beliebigen Webressourcen Werte ins Spiel integrieren wollen unterscheidet sich nicht von einem Pseudozufallszahlengenerator (was ich aber schon im letzten Feedback geschrieben hatte): Damit die Anwendung webbasiert ist, ist es ein Minimum, dass Spieler von unterschiedlichen Orten weltweit aus an einer gemeinsamen Partie teilnehmen können.

Überarbeiten Sie Ihre Projektidee deshalb bitte so, dass es eine vollwertige interaktive webbasierte Anwendung beschreibt.

Wertung 2: Projektbeschreibung: gesamt: 1 / 10
- Pro Interaktionsmöglichkeit: 0
- Knappe aber klare Beschreibung: 1 (Die Beschreibung ist zwar knapp und klar, aber es fehlt der eigentliche Spielablauf; wenn der sich auf das An- und Verkaufen von Aktien beschränkt, ist es für ein Projekt bei weitem zu wenig.)
- Werbeslogans u.ä.: 0 
- Designaspekte: 0 
- Voraussetzung bekannten Wissens: 0 

=====================
=== Feedback Ende ===
=====================